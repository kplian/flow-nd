"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.configPassportLocal = exports.verifyCallback = void 0;
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Local config
 *
 * @summary Local config
 * @author Israel Colque
 *
 * Created at     : 2020-06-13 18:09:48
 * Last modified  : 2020-12-01 10:57:09
 */
const passport_1 = __importDefault(require("passport"));
const passportLocal = __importStar(require("passport-local"));
const password_1 = require("../utils/password");
const common_1 = require("@pxp-nd/common");
const typeorm_1 = require("typeorm");
const LocalStrategy = passportLocal.Strategy;
const customFields = {
    usernameField: 'username',
    passwordField: 'password'
};
const verifyCallback = (username, password, done) => {
    // const userRepository = getCustomRepository(UserRepository);
    /*
    {
          select: ['username', 'userId', 'person', 'authenticationType', 'style', 'hash', 'salt'],
          where: {
            username
          }
        }*/
    typeorm_1.getRepository(common_1.User)
        .createQueryBuilder('user')
        .innerJoin('user.person', 'person')
        .select([
        'user.userId',
        'user.username',
        'user.authenticationType',
        'user.style',
        'user.hash',
        'user.salt',
        'person.name',
        'person.lastName',
        'person.lastName2',
        'person.mail',
    ])
        .where('user.username = :name', { name: username })
        .getOne()
        .then((user) => {
        if (!user) {
            return done(null, false, 'Invalid username or password');
        }
        const isValid = password_1.validPassword(password, user.hash, user.salt);
        delete user.hash;
        delete user.salt;
        if (isValid) {
            return done(null, user);
        }
        else {
            return done(null, false, 'Invalid username or password');
        }
    })
        .catch((err) => {
        done(err);
    });
};
exports.verifyCallback = verifyCallback;
function serializeUser(user, done) {
    done(null, user.userId);
}
function deserializeUser(userId, done) {
    // const userRepository = getCustomRepository(UserRepository);
    typeorm_1.getRepository(common_1.User).createQueryBuilder('user')
        //.leftJoinAndSelect('role.uis', 'ui')
        .leftJoinAndSelect('user.roles', 'role', 'role.roleId = 1')
        .where('user.userId = :id', { id: userId })
        .getOne()
        .then((user) => {
        done(null, user);
    })
        .catch((err) => done(err));
}
;
function configPassportLocal(fields = customFields, verifyCb = exports.verifyCallback, serializeUs = serializeUser, deserializeUs = deserializeUser) {
    const strategy = new LocalStrategy(fields, verifyCb);
    passport_1.default.use(strategy);
    // This method is used to store the user identifier locally.
    passport_1.default.serializeUser(serializeUs);
    // This method is used to extract user data.
    passport_1.default.deserializeUser(deserializeUs);
}
exports.configPassportLocal = configPassportLocal;
