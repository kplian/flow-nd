"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Person Controller
 *
 * @summary Account Status Entity
 * @author Favio Figueroa
 *
 * Created at     : 2020-09-17 18:55:38
 * Last modified  :
 */
const typeorm_1 = require("typeorm");
const PxpEntity_1 = require("../PxpEntity");
const moment_1 = __importDefault(require("moment"));
const AccountStatusType_1 = __importDefault(require("./AccountStatusType"));
const class_validator_1 = require("class-validator");
let AccountStatus = class AccountStatus extends PxpEntity_1.PxpEntity {
    setComputed() {
        this.dateString = moment_1.default(this.date).format('YYYY-MM-DD');
    }
};
__decorate([
    typeorm_1.PrimaryGeneratedColumn({ name: 'account_status_id' }),
    __metadata("design:type", Number)
], AccountStatus.prototype, "accountStatusId", void 0);
__decorate([
    typeorm_1.Column({ name: 'table_id', type: 'integer', nullable: false }),
    __metadata("design:type", Number)
], AccountStatus.prototype, "tableId", void 0);
__decorate([
    typeorm_1.Column({ name: 'amount', type: 'numeric', nullable: false }),
    __metadata("design:type", Number)
], AccountStatus.prototype, "amount", void 0);
__decorate([
    typeorm_1.Column({ name: 'description', type: 'varchar', length: 500, nullable: true }),
    __metadata("design:type", String)
], AccountStatus.prototype, "description", void 0);
__decorate([
    class_validator_1.IsOptional(),
    typeorm_1.Column({ name: 'date', type: 'date', nullable: false }),
    __metadata("design:type", String)
], AccountStatus.prototype, "date", void 0);
__decorate([
    typeorm_1.Column({ name: 'typeTransaction', type: 'varchar', length: 50, nullable: false }),
    __metadata("design:type", String)
], AccountStatus.prototype, "typeTransaction", void 0);
__decorate([
    typeorm_1.Column({
        name: 'account_status_type_id',
        type: 'integer',
        nullable: false
    }),
    __metadata("design:type", Number)
], AccountStatus.prototype, "accountStatusTypeId", void 0);
__decorate([
    typeorm_1.ManyToOne(() => AccountStatusType_1.default, (accountStatusType) => accountStatusType.posts, {
        eager: true,
        cascade: true
    }),
    typeorm_1.JoinColumn({ name: 'account_status_type_id' }),
    __metadata("design:type", AccountStatusType_1.default)
], AccountStatus.prototype, "accountStatusType", void 0);
__decorate([
    typeorm_1.AfterLoad(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], AccountStatus.prototype, "setComputed", null);
AccountStatus = __decorate([
    typeorm_1.Entity({ name: 'tpar_account_status' })
], AccountStatus);
exports.default = AccountStatus;
