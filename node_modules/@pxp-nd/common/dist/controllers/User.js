"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * User Controller
 *
 * @summary User Controller
 * @author Jaime Rivera
 *
 * Created at     : 2020-09-17 18:55:38
 * Last modified  : 2020-09-17 19:04:30
 */
const typeorm_1 = require("typeorm");
const typeorm_2 = require("typeorm");
const core_1 = require("@pxp-nd/core");
const auth_1 = require("@pxp-nd/auth");
const entities_1 = require("../entities");
const entities_2 = require("../entities");
const entities_3 = require("../entities");
let User = class User extends core_1.Controller {
    async getAll(params) {
        const users = await typeorm_2.getManager().find(entities_1.User);
        return users;
    }
    async addAdminUser(params, manager) {
        const person = new entities_2.Person();
        person.name = params.name;
        person.lastName = params.lastName;
        person.createdBy = 'admin';
        await core_1.__(manager.save(person));
        const role = await core_1.__(entities_3.Role.findOne({
            role: 'admin'
        }));
        const user = new entities_1.User();
        user.person = person;
        user.username = params.username;
        const hashSalt = auth_1.genPassword(params.password);
        user.hash = hashSalt.hash;
        user.salt = hashSalt.salt;
        user.createdBy = 'admin';
        user.roles = [role];
        const userResult = await core_1.__(manager.save(user));
        return { userId: userResult.userId };
    }
    async genPassword(params) {
        const hashSalt = auth_1.genPassword(params.password);
        return hashSalt;
    }
};
__decorate([
    core_1.Get(),
    core_1.DbSettings('Orm'),
    core_1.ReadOnly(true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], User.prototype, "getAll", null);
__decorate([
    core_1.Post(),
    core_1.ReadOnly(false),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, typeorm_1.EntityManager]),
    __metadata("design:returntype", Promise)
], User.prototype, "addAdminUser", null);
__decorate([
    core_1.Get(),
    core_1.DbSettings('Orm'),
    core_1.ReadOnly(true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], User.prototype, "genPassword", null);
User = __decorate([
    core_1.Route('/user'),
    core_1.StoredProcedure('pxp.ftusuario'),
    core_1.Model('common/User')
], User);
exports.default = User;
