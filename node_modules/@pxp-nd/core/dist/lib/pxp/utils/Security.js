"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.insertLog = exports.userHasPermission = void 0;
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Common security functions
 *
 * @summary Common security functions.
 * @author Mercedes Zambrana
 *
 * Created at     : 2020-06-13 18:09:48
 * Last modified  : 2020-10-20 17:46:24
 */
require("reflect-metadata");
const typeorm_1 = require("typeorm");
// import { Role } from '@pxp-nd/entities';
const Log_1 = __importDefault(require("../../../entities/Log"));
const userHasPermission = (Role) => async (userId, transaction) => {
    const user = await typeorm_1.getManager()
        .createQueryBuilder(Role, 'role')
        .innerJoinAndSelect('role.uis', 'ui')
        .innerJoin('role.users', 'user')
        .innerJoin('ui.transactions', 'uiTran')
        .innerJoin('uiTran.transaction', 'transac')
        .select('COUNT(*) AS count')
        .where('"user".user_id = :userId', { userId })
        .andWhere('transac.code= :codeTrans', { codeTrans: transaction })
        .getRawOne();
    return user.count === '0' ? false : true;
};
exports.userHasPermission = userHasPermission;
const insertLog = async (username, macaddres, ip, logType, desc, proc, trans, query, req, resp, err, timeEx, logConfig) => {
    if (logConfig) {
        for (const [key, value] of Object.entries(logConfig)) {
            if (key in req) {
                if (!value) {
                    delete req[key];
                }
                else if (value === 'cc_mask') {
                    const aux = req[key];
                    req[key] = '************' + aux.substr(-4);
                }
                else if (value === 'complete_mask') {
                    const aux = req[key];
                    req[key] = aux.replace(/./g, '*');
                }
            }
        }
    }
    const log = new Log_1.default();
    log.username = username;
    log.macaddres = macaddres;
    log.ip = ip;
    log.logType = logType;
    log.description = desc;
    log.procedure = proc;
    log.transaction = trans;
    log.query = query;
    log.request = JSON.stringify(req);
    log.response = resp;
    log.execTime = timeEx;
    log.errorCode = err;
    log.shortRequest = JSON.stringify(req).substring(0, 150);
    log.shortResponse = resp.substring(0, 150);
    const logIds = await typeorm_1.getManager(process.env.DB_LOG_CONNECTION_NAME)
        .createQueryBuilder()
        .insert()
        .into(Log_1.default)
        .values([log])
        .execute();
    return logIds.identifiers[0].logId;
};
exports.insertLog = insertLog;
