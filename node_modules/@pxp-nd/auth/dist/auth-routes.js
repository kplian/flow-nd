"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.customAuthRoutes = exports.getAuthRoutes = void 0;
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Authentication Routes
 *
 * @summary Authentication Routes.
 * @author Israel Colque
 *
 * Created at     : 2020-06-13 18:09:48
 * Last modified  : 2020-12-01 11:23:10
 */
const express_1 = require("express");
const passport_1 = __importDefault(require("passport"));
const passport_config_1 = require("./config/passport-config");
const typeorm_1 = require("typeorm");
// import { UserRepository } from '@pxp-nd/repositories';
const common_1 = require("@pxp-nd/common");
const password_1 = require("./utils/password");
const passport_jwt_1 = require("./config/passport-jwt");
const core_1 = require("@pxp-nd/core");
const passport_config_2 = require("./config/passport-config");
const path_1 = __importDefault(require("path"));
const getAuthRoutes = (apiPrefix) => {
    const authRouter = express_1.Router();
    authRouter.post(apiPrefix + '/auth/login', (req, res, next) => {
        res.setHeader('Access-Control-Allow-Credentials', 'true');
        passport_1.default.authenticate('local', (err, user, info) => {
            if (err) {
                core_1.errorMiddleware(err, req, res);
            }
            if (!user) {
                // throw new PxpError(400, info);
                return res.status(400).json({
                    message: info,
                });
            }
            req.logIn(user, function (err) {
                if (err) {
                    return next(err);
                }
                const tokenObject = passport_jwt_1.issueJWT(user);
                return res.status(200).send(Object.assign(Object.assign({}, user), { tokenObject }));
            });
        })(req, res, next);
    });
    authRouter.post(apiPrefix + '/auth/login/token', (req, res, next) => {
        // const userRepo = getCustomRepository(UserRepository);
        typeorm_1.getRepository(common_1.User)
            .findOne({
            where: {
                username: req.body.username
            }
        })
            .then((user) => {
            if (!user) {
                return res
                    .status(400)
                    .send({ message: 'Invalid username or password' });
            }
            const isValid = password_1.validPassword(req.body.password, String(user.hash), String(user.salt));
            if (isValid) {
                let tokenObject;
                if (req.body.expiresIn) {
                    tokenObject = passport_jwt_1.issueJWT(user, req.body.expiresIn);
                }
                else {
                    tokenObject = passport_jwt_1.issueJWT(user);
                }
                return res.status(200).send({
                    success: true,
                    token: tokenObject.token,
                    expiresIn: tokenObject.expires
                });
            }
            else {
                return res
                    .status(400)
                    .send({ message: 'Invalid username or password' });
            }
        })
            .catch((err) => {
            return res.status(400).send(err);
        });
    });
    authRouter.get(apiPrefix + '/auth/guard', passport_config_1.isAuthenticated, (req, res, next) => {
        res.status(200).send({
            message: 'RUOTE GUARD'
        });
    });
    authRouter.post(apiPrefix + '/auth/logout', (req, res, next) => {
        req.logout();
        res.status(200).send({
            message: 'Logout correct'
        });
    });
    //** GOOGLE */
    authRouter.get(apiPrefix + '/auth/google', passport_1.default.authenticate('google', {
        scope: [
            'https://www.googleapis.com/auth/plus.login',
            'https://www.googleapis.com/auth/userinfo.email',
            'https://www.googleapis.com/auth/userinfo.profile'
        ]
    }));
    authRouter.get(apiPrefix + '/auth/google/callback', passport_1.default.authenticate('google', { failureRedirect: '/auth/login' }), function (req, res) {
        res.status(200).send(req.user);
    });
    /** FACEBOOK */
    authRouter.get(apiPrefix + '/auth/facebook', passport_1.default.authenticate('facebook', { scope: ['read_stream', 'email'] }));
    authRouter.get(apiPrefix + '/auth/facebook/callback', passport_1.default.authenticate('facebook', { failureRedirect: '/auth/login' }), function (req, res) {
        res.redirect('/');
    });
    return authRouter;
};
exports.getAuthRoutes = getAuthRoutes;
const customAuthRoutes = () => {
    const routers = [];
    passport_config_2.getRoutesAuth()
        .forEach(module => {
        const authFile = path_1.default.join(module, 'auth', 'auth.js');
        routers.push(Promise.resolve().then(() => __importStar(require(authFile))));
    });
    return Promise.all(routers);
};
exports.customAuthRoutes = customAuthRoutes;
