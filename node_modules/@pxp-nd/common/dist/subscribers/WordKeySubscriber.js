"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WordKeySubscriber = void 0;
const typeorm_1 = require("typeorm");
const entities_1 = require("@pxp-nd/entities");
const axios_1 = __importDefault(require("axios"));
let WordKeySubscriber = class WordKeySubscriber {
    listenTo() {
        return entities_1.WordKey;
    }
    async afterInsert(event) {
        const wordKey = event.entity;
        const [langs, countLangs] = await event.manager.findAndCount(entities_1.Language, { where: { isActive: true } });
        const translateUrl = (lang, text) => 'https://translate.yandex.net/api/v1.5/tr.json/translate?key=trnsl.1.1.20170606T185752Z.72aa1b413023beed.315f7dfc0e2db9db2038b567c99f1fcd66c32fd9&lang=' + lang + '&text=' + text;
        const yandexTranslates = langs.map(lang => axios_1.default.get(translateUrl(lang.code, wordKey.defaultText)));
        // const translatesAll = Promise.all(yandexTranslates).then(console.log).catch(console.log);
        // console.log(translatesAll[0].data);
        const translates = langs.map((lang) => ({
            text: wordKey.defaultText,
            wordId: wordKey.wordKeyId,
            state: 'AUTO',
            languageId: lang.languageId,
        }));
        await event.manager.save(entities_1.Translate, translates);
    }
};
WordKeySubscriber = __decorate([
    typeorm_1.EventSubscriber()
], WordKeySubscriber);
exports.WordKeySubscriber = WordKeySubscriber;
