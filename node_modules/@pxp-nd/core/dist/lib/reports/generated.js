"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReport = exports.listReports = exports.listGroup = exports.generateReport = void 0;
const typeorm_1 = require("typeorm");
// import {Report, ReportGroup } from '@pxp-nd/entities';
const lodash_1 = require("lodash");
const pdf_1 = require("./pdf");
const xlsx_1 = require("./xlsx");
const _ = __importStar(require("lodash"));
const parseColumns = (columns) => Object.keys(columns).map((key) => ({
    header: columns[key].label,
    dataKey: key,
}));
const setLimitOffset = (query, limit, offset) => {
    return `${query} LIMIT ${limit} OFFSET ${offset} `;
};
const setCountData = (query) => {
    return `SELECT count(*) from (${query}) as report`;
};
const getDataQuery = async (query, filters, type, limit, start) => {
    let qp = parseParamsReport(query, filters);
    const dataCount = await typeorm_1.getManager().query(setCountData(qp));
    qp = !type ? setLimitOffset(qp, limit, start) : qp;
    const data = await typeorm_1.getManager().query(qp);
    return {
        data,
        count: dataCount[0].count
    };
};
const totalCalculate = (data, columns) => {
    const totals = {};
    Object.keys(columns).map((key) => {
        const column = columns[key];
        if (column.total && column.total === 'sum') {
            totals[key] = _.round(_.sumBy(data, (item) => parseFloat(item[key])), 2);
        }
    });
    return totals;
};
const getSummaryDetail = (columns, columnsDetail, config) => {
    const result = {};
    Object.keys(config).map(field => {
        result[field] = {
            value: eval(config[field].value),
            label: config[field].label
        };
    });
    return result;
};
const filtersLabelBuild = (filters, values) => {
    const labels = {};
    Object.keys(filters).forEach(key => {
        labels[key] = {
            label: filters[key].label,
            value: values[key],
        };
    });
    return labels;
};
const generateReport = (Report) => async (req, res) => {
    try {
        const report = await typeorm_1.getManager().findOne(Report, {
            where: {
                reportId: req.params.id
            }
        });
        if (report) {
            const config = JSON.parse(report.config);
            const filters = req.query.filters && req.query.filters !== 'null' ? JSON.parse(req.query.filters) : {};
            const type = lodash_1.get(req.params, 'type');
            const limit = req.query.limit || 0;
            const start = req.query.start || 0;
            const result = await getDataQuery(report.query, filters, type, limit, start);
            const resultTotal = await getDataQuery(report.query, filters, 'total', limit, start);
            const totals = totalCalculate(resultTotal.data, config.columns);
            const resultDetail = report.detailQuery ? await getDataQuery(report.detailQuery, filters, type, limit, start) : null;
            let totalsDetail = null, summaryData = null;
            if (resultDetail) {
                totalsDetail = totalCalculate(resultDetail.data, config.columnsDetail);
                summaryData = getSummaryDetail(totals, totalsDetail, config.detailSummary);
            }
            const reportData = () => {
                const filtersReport = filtersLabelBuild(JSON.parse(report.filters), filters);
                req.reportData = {
                    data: result.data,
                    totals,
                    filters: filtersReport
                };
                req.reportDetailData = resultDetail ? {
                    data: resultDetail.data,
                    columns: parseColumns(config.columnsDetail),
                    totals: totalsDetail
                } : null;
                req.reportSummary = summaryData;
                req.report = {};
                req.report.columns = parseColumns(config.columns);
                req.report.filename = report.name;
            };
            if (type && type === 'pdf') {
                reportData();
                pdf_1.makePdf(req, res);
            }
            else if (type && type === 'xlsx') {
                reportData();
                xlsx_1.makeXlsx(req, res);
            }
            else {
                return res.send(Object.assign(Object.assign({}, result), { totals, dataDetail: resultDetail ? resultDetail.data : null, countDetail: resultDetail ? resultDetail.count : null, totalsDetail,
                    summaryData }));
            }
        }
        else {
            res.status(400).send({
                error: true,
                message: 'Invalid Report'
            });
        }
    }
    catch (ex) {
        console.log(ex);
        res.status(500).send({
            error: true,
            message: 'Internal Server Error'
        });
    }
};
exports.generateReport = generateReport;
const listGroup = (ReportGroup) => async (req, res) => {
    const reports = await typeorm_1.getManager().find(ReportGroup, {
        where: {
            active: true,
        },
        select: ['title', 'reportGroupId'],
    });
    return res.send(reports);
};
exports.listGroup = listGroup;
const listReports = (Report) => async (req, res) => {
    const reports = await typeorm_1.getManager().find(Report, {
        where: {
            active: true,
            reportGroupId: req.params.groupId
        },
        select: ['reportId', 'name'],
        order: {
            order: 'ASC'
        }
    });
    return res.send(reports);
};
exports.listReports = listReports;
const getReport = (Report) => async (req, res) => {
    const report = await typeorm_1.getManager().findOne(Report, {
        where: {
            reportId: req.params.id
        },
        select: ['reportId', 'name', 'filters', 'config']
    });
    return res.send(report);
};
exports.getReport = getReport;
const parseParamsReport = (query, params = {}) => {
    const loadParams = query.replace(/\n/g, '').split(' ').filter(item => lodash_1.startsWith(item, ':'));
    const convertParams = loadParams.map(item => {
        const key = item.substring(1, item.length);
        if (params[key]) {
            return {
                key,
                value: `'${params[key]}'`,
            };
        }
        else {
            return {
                key,
                value: '',
            };
        }
    });
    convertParams.forEach(item => query = lodash_1.replace(query, ':' + item.key, item.value));
    return query;
};
