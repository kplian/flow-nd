export declare interface ILog {
    [field: string]: 'cc_mask' | 'complete_mask';
}
export declare interface IOptionsRoute {
    readOnly?: boolean;
    isHtml?: boolean;
    dbSettings?: 'Procedure' | 'Orm' | 'Query';
    authentication?: boolean;
    log?: boolean | ILog;
}
declare const Get: (path?: string, options?: IOptionsRoute) => (target: any, propertyKey: string) => void;
declare const Post: (path?: string, options?: IOptionsRoute) => (target: any, propertyKey: string) => void;
declare const Put: (path?: string, options?: IOptionsRoute) => (target: any, propertyKey: string) => void;
declare const Patch: (path?: string, options?: IOptionsRoute) => (target: any, propertyKey: string) => void;
declare const Delete: (path?: string, options?: IOptionsRoute) => (target: any, propertyKey: string) => void;
declare const Route: (controllerPath?: string) => ClassDecorator;
declare const Model: (model: string) => ClassDecorator;
declare const StoredProcedure: (storedProcedure: string) => ClassDecorator;
declare const Authentication: (authentication?: boolean) => (target: any, propertyKey: string) => void;
declare const ReadOnly: (ronly?: boolean) => (target: any, propertyKey: string) => void;
declare const IsHtml: (ishtml?: boolean) => (target: any, propertyKey: string) => void;
declare const DbSettings: (modelType: 'Procedure' | 'Orm' | 'Query') => (target: any, propertyKey: string) => void;
declare const Permission: (permission?: boolean) => (target: any, propertyKey: string) => void;
declare const Log: (log?: boolean, config?: Record<string, unknown>) => (target: any, propertyKey: string) => void;
export { Get, Post, Put, Delete, Patch, Route, Authentication, Log, Permission, DbSettings, ReadOnly, IsHtml, Model, StoredProcedure };
