"use strict";
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Error class and middlewares.
 *
 * @summary Here is defined Pxp error class, middleware and promise handler __.
 * @author Jaime Rivera
 *
 * Created at     : 2020-06-13 18:09:48
 * Last modified  : 2020-09-20 18:20:43
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.__ = exports.errorMiddleware = exports.PxpError = void 0;
const genericMessage = 'Web server error. Contact the administrator';
let showError = false;
class PxpError extends Error {
    constructor(statusCode, message, errorObject, stack) {
        super();
        this.statusCode = statusCode;
        this.message = statusCode === 500 ? genericMessage : message;
        this.errorObject = errorObject;
        this.tecMessage = message;
        this.stack = stack || this.stack;
    }
}
exports.PxpError = PxpError;
// Pxp async promise error handler
const __ = (promise, myShowError = false) => (promise
    .then((data) => data)
    .catch((error) => {
    showError = myShowError || showError;
    if (error instanceof PxpError) {
        throw error;
    }
    else {
        throw new PxpError(showError ? 406 : 500, error.message, undefined, error.stack);
    }
}));
exports.__ = __;
// error handler middleware
const errorMiddleware = (err, req, res) => {
    const { statusCode, message, stack, tecMessage, errorObject } = err;
    const extraObj = process.env.NODE_ENV === 'production' ? {} : { extendedMessage: tecMessage, stack };
    // @todo if production not show tecMessage and stack
    return res.status(err.statusCode || 500).json({
        error: Object.assign({
            code: statusCode,
            message,
            logId: res.logId ? res.logId : undefined,
            errorObject,
        }, extraObj),
    });
};
exports.errorMiddleware = errorMiddleware;
