"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Person Controller
 *
 * @summary Person Controller
 * @author Jaime Rivera
 *
 * Created at     : 2020-09-17 18:55:38
 * Last modified  : 2020-11-02 11:58:05
 */
const typeorm_1 = require("typeorm");
const core_1 = require("@pxp-nd/core");
const entities_1 = require("../entities");
let Person = class Person extends core_1.Controller {
    /*@Get()
    @DbSettings('Orm')
    @ReadOnly(true)
    async list(params: Record<string, unknown>): Promise<unknown> {
      const listParam = this.getListParams(params);
      const [persons, count] = await __(PersonModel.findAndCount(listParam)) as unknown[];
      return { data: persons, count };
    }*/
    async add(params, manager) {
        const person = new entities_1.Person();
        Object.assign(person, params);
        person.createdBy = this.user.username;
        await core_1.__(this.classValidate(person));
        await manager.save(person);
        return person;
    }
};
__decorate([
    core_1.Post(),
    core_1.DbSettings('Orm'),
    core_1.ReadOnly(false),
    core_1.Log(true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, typeorm_1.EntityManager]),
    __metadata("design:returntype", Promise)
], Person.prototype, "add", null);
Person = __decorate([
    core_1.Model('common/Person')
], Person);
exports.default = Person;
