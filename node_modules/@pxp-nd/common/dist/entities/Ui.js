"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var Ui_1;
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * long description for the file
 *
 * @summary short description for the file
 * @author No author
 *
 * Created at     : 2020-09-17 18:55:38
 * Last modified  : 2020-10-09 09:10:00
 */
const typeorm_1 = require("typeorm");
const Role_1 = __importDefault(require("./Role"));
const Subsystem_1 = __importDefault(require("./Subsystem"));
const UiTransaction_1 = __importDefault(require("./UiTransaction"));
const PxpEntity_1 = require("../PxpEntity");
const core_1 = require("@pxp-nd/core");
let Ui = Ui_1 = class Ui extends PxpEntity_1.PxpEntity {
    static async findRecursive(params, parentId, isAdmin, uiList = []) {
        if (uiList.length === 0 && !isAdmin) {
            return [];
        }
        const qb = typeorm_1.getManager()
            .createQueryBuilder(Ui_1, 'ui')
            .innerJoin('ui.subsystem', 'ss')
            .select('ui.uiId', 'uiId')
            .addSelect('ui.parentId', 'parentId')
            .addSelect('ui.code', 'code')
            .addSelect('ui.name', 'text')
            .addSelect('ui.description', 'description')
            .addSelect('ui.route', 'component')
            .addSelect('ui.order', 'order')
            .addSelect('ui.icon', 'icon')
            .addSelect('ss.code', 'subsystem')
            .where('ui.parent_ui_id = :parentId', { parentId });
        if (params.system && params.system !== undefined) {
            qb.andWhere('ss.code = :system', { system: params.system });
        }
        // validate permission
        if (!isAdmin) {
            qb.andWhere('ui.ui_id IN(:...uiList)', { uiList });
        }
        const uis = await core_1.__(qb.getRawMany());
        console.log(uis);
        let resUis = uis;
        let isPush = false;
        if (parentId === 1 && !params.includeSystemRoot) {
            resUis = [];
            isPush = true;
        }
        if (params.folder && params.folder !== undefined) {
            console.log('folder', params.folder);
            resUis = [];
            isPush = true;
        }
        let count = 0;
        // recursive call
        for (const ui of uis) {
            if (isPush) {
                const newParams = Object.assign(params);
                if (newParams.folder && newParams.folder === ui.code) {
                    delete newParams.folder;
                }
                resUis.push(...await core_1.__(this.findRecursive(newParams, ui.uiId, isAdmin, uiList)));
            }
            else {
                resUis[count].children = await core_1.__(this.findRecursive(params, ui.uiId, isAdmin, uiList));
                if (resUis[count].children.length === 0) {
                    resUis[count].type = 'leaf';
                }
                else {
                    resUis[count].type = 'branch';
                }
                count++;
            }
        }
        return resUis;
    }
};
__decorate([
    typeorm_1.PrimaryGeneratedColumn({ name: 'ui_id' }),
    __metadata("design:type", Number)
], Ui.prototype, "uiId", void 0);
__decorate([
    typeorm_1.Column({ name: 'code', type: 'varchar', length: 80, nullable: false }),
    __metadata("design:type", String)
], Ui.prototype, "code", void 0);
__decorate([
    typeorm_1.Column({ name: 'name', type: 'varchar', length: 80, nullable: false }),
    __metadata("design:type", String)
], Ui.prototype, "name", void 0);
__decorate([
    typeorm_1.Column({ name: 'description', type: 'text' }),
    __metadata("design:type", String)
], Ui.prototype, "description", void 0);
__decorate([
    typeorm_1.Column({ name: 'visible', type: 'varchar', length: 20, nullable: true, default: 'yes' }),
    __metadata("design:type", String)
], Ui.prototype, "visible", void 0);
__decorate([
    typeorm_1.Column({ name: 'route', type: 'varchar', length: 80, nullable: true }),
    __metadata("design:type", String)
], Ui.prototype, "route", void 0);
__decorate([
    typeorm_1.Column({ name: 'order', type: 'integer', nullable: true }),
    __metadata("design:type", Number)
], Ui.prototype, "order", void 0);
__decorate([
    typeorm_1.Column({ name: 'icon', type: 'varchar', length: 80, nullable: true }),
    __metadata("design:type", String)
], Ui.prototype, "icon", void 0);
__decorate([
    typeorm_1.ManyToMany(() => Role_1.default),
    typeorm_1.JoinTable({
        name: 'tsec_ui_role',
        joinColumn: {
            name: 'ui_id',
            referencedColumnName: 'uiId'
        },
        inverseJoinColumn: {
            name: 'role_id',
            referencedColumnName: 'roleId'
        }
    }),
    __metadata("design:type", Array)
], Ui.prototype, "roles", void 0);
__decorate([
    typeorm_1.OneToMany(() => UiTransaction_1.default, uiTransaction => uiTransaction.ui),
    typeorm_1.JoinTable(),
    __metadata("design:type", Array)
], Ui.prototype, "transactions", void 0);
__decorate([
    typeorm_1.Column({ nullable: true, name: 'parent_ui_id' }),
    __metadata("design:type", Number)
], Ui.prototype, "parentId", void 0);
__decorate([
    typeorm_1.Column({ nullable: false, name: 'subsystem_id' }),
    __metadata("design:type", Number)
], Ui.prototype, "subsystemId", void 0);
__decorate([
    typeorm_1.ManyToOne(() => Ui_1, ui => ui.children),
    typeorm_1.JoinColumn({ name: 'parent_ui_id' }),
    __metadata("design:type", Ui)
], Ui.prototype, "parent", void 0);
__decorate([
    typeorm_1.OneToMany(() => Ui_1, ui => ui.parent),
    __metadata("design:type", Array)
], Ui.prototype, "children", void 0);
__decorate([
    typeorm_1.ManyToOne(() => Subsystem_1.default, subsystem => subsystem.uis),
    typeorm_1.JoinColumn({ name: 'subsystem_id' }),
    __metadata("design:type", Subsystem_1.default)
], Ui.prototype, "subsystem", void 0);
__decorate([
    typeorm_1.Column({ nullable: true, name: 'role_id' }),
    __metadata("design:type", Number)
], Ui.prototype, "roleId", void 0);
Ui = Ui_1 = __decorate([
    typeorm_1.Entity({ name: 'tsec_ui' })
], Ui);
exports.default = Ui;
