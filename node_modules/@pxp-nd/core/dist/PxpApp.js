"use strict";
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Main pxp-nd file.
 *
 * @summary Handles all requests for pxp-ui or pxp-nd.
 * @author Jaime Rivera
 *
 * Created at     : 2020-06-13 18:09:48
 * Last modified  : 2020-09-20 18:24:45
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PxpApp = void 0;
require("reflect-metadata");
const typeorm_1 = require("typeorm");
const express_fileupload_1 = __importDefault(require("express-fileupload"));
const express_1 = __importDefault(require("express"));
const passport_1 = __importDefault(require("passport"));
const express_session_1 = __importDefault(require("express-session"));
const typeorm_2 = require("typeorm");
const cors_1 = __importDefault(require("cors"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const http_1 = __importDefault(require("http"));
/** swagger options **/
const swagger_ui_express_1 = __importDefault(require("swagger-ui-express"));
const swagger_jsdoc_1 = __importDefault(require("swagger-jsdoc"));
const swaggerOptions_1 = __importDefault(require("./swaggerOptions"));
const loadControllers_1 = __importDefault(require("./lib/pxp/loadControllers"));
const pxp_1 = require("./lib/pxp");
// import { getAuthRoutes, customAuthRoutes } from '@pxp-nd/auth';
// import { configPassport } from '@pxp-nd/auth';
// import { Session } from '@pxp-nd/entities';
const typeorm_store_1 = require("typeorm-store");
const report_routes_1 = require("./lib/reports/report-routes");
const pxp_io_server_1 = __importDefault(require("./sockets/pxp-io-server"));
const modulesPxp = {
    auth: '@pxp-nd/auth',
    common: '@pxp-nd/common',
    reports: '@pxp-nd/reports',
};
//auth configure 
/**
 *
 * */
class PxpApp {
    constructor(config) {
        this.configAuth = null;
        this.Report = null;
        this.ReportGroup = null;
        this.sockets = {};
        this.config = {
            defaultDbSettings: 'Orm',
            apiPrefix: '/api',
            logDuration: true,
            middlewares: [],
        };
        this.getDurationInMilliseconds = (start) => {
            const NS_PER_SEC = 1e9;
            const NS_TO_MS = 1e6;
            const diff = process.hrtime(start);
            return (diff[0] * NS_PER_SEC + diff[1]) / NS_TO_MS;
        };
        this.folderModulesCreate();
        this.config = Object.assign(Object.assign({}, this.config), config);
        this.app = express_1.default();
        this.controllers = [];
        // this.initializeMiddlewares();
    }
    static get instance() {
        return this._instance || (this._instance = new this(null));
    }
    set ConfigAuth(authOptions) {
        this.configAuth = authOptions;
    }
    initializeSwagger() {
        const options = {
            customCss: '.swagger-ui .topbar { display: none }',
            explorer: true,
        };
        const swaggerDocs = swagger_jsdoc_1.default(swaggerOptions_1.default);
        this.app.use('/explorer', swagger_ui_express_1.default.serve, swagger_ui_express_1.default.setup(swaggerDocs, options));
    }
    async loadControllers() {
        // await this.connectToTheDatabase();
        // await this.initializeAuthentication();
        this.controllers = await loadControllers_1.default(this.config, this.io);
        this.initializeRoutes();
        this.initializeErrorHandling();
    }
    loadIOserver() {
        this._httpServer = new http_1.default.Server(this.app);
        if (this.config.enableSocket) {
            this.io = new pxp_io_server_1.default(this._httpServer, this.sockets).io;
        }
    }
    listen() {
        this._httpServer.listen(process.env.PORT, () => {
            console.log(`${'\x1b[36m'}App listening on the port ${process.env.PORT}${'\x1b[0m'}`);
        });
    }
    getServer() {
        return this.app;
    }
    initializeMiddlewares() {
        this.app.use((req, res, next) => {
            req.start = new Date();
            if (this.config.logDuration) {
                console.log(`${req.method} ${req.originalUrl} [STARTED]`);
                const start = process.hrtime();
                res.on('finish', () => {
                    const durationInMilliseconds = this.getDurationInMilliseconds(start);
                    console.log(`${req.method} ${req.originalUrl} [FINISHED] ${durationInMilliseconds.toLocaleString()} ms`);
                });
                res.on('close', () => {
                    const durationInMilliseconds = this.getDurationInMilliseconds(start);
                    console.log(`${req.method} ${req.originalUrl} [CLOSED] ${durationInMilliseconds.toLocaleString()} ms`);
                });
            }
            next();
        });
        this.app.use(express_1.default.json());
        this.app.use(express_1.default.urlencoded({ extended: false }));
        const fileSizeMax = process.env.FILE_SIZE_MAX ? parseInt(process.env.FILE_SIZE_MAX) : 5;
        this.app.use(express_fileupload_1.default({
            limits: { fileSize: fileSizeMax * 1024 * 1024 },
        }));
        this.configCors();
    }
    async initializeAuthentication(configAuth) {
        if (configAuth) {
            const { configPassport, getAuthRoutes, customAuthRoutes } = configAuth();
            this.initializeSession();
            await this.initializePassport(configPassport, getAuthRoutes, customAuthRoutes);
        }
        else {
            throw new Error(`Invalid config Auth, set ConfigAuth:\n
        \t// App.ts file
        \timport { configAuth } from '@pxp-nd/auth';
        \t// In constructror set...
        \tthis.ConfigAuth  = configAuth;
        \t//...`);
        }
    }
    initializeErrorHandling() {
        this.app.use(pxp_1.errorMiddleware);
    }
    async initializePassport(configPassport, getAuthRoutes, customAuthRoutes) {
        configPassport(this.config.auth);
        this.app.use(passport_1.default.initialize());
        // @todo only validate session if authorization is not set(10/03/2021)
        this.app.use(passport_1.default.session());
        this.app.use((req, res, next) => {
            if (req.headers.authorization) {
                passport_1.default.authenticate('jwt', { session: false }, function (err, user, info) {
                    if (user) {
                        req.logIn(user, function (err) {
                            next();
                        });
                    }
                    else {
                        next();
                    }
                })(req, res, next);
            }
            else {
                next();
            }
        });
        this.app.use((req, res, next) => {
            next();
        });
        const routes = await customAuthRoutes();
        routes.forEach((route) => this.app.use(route.router));
        const authRoutes = getAuthRoutes(this.config.apiPrefix);
        this.showRoutes(authRoutes);
        this.app.use(authRoutes);
        if (this.config.reports) {
            if (!this.Report && !this.ReportGroup) {
                throw new Error(`Invalid Report configuration, set Report and ReportGroup entities:\n
          \t// App.ts file
          \timport { Report, ReportGroup } from '@pxp-nd/common';
          \t//...
          \tthis.Report  = Report;
          \tthis.ReportGroup  = ReportGroup;
          `);
            }
            const reportRouter = report_routes_1.getReportsRouter(this.config, this.Report, this.ReportGroup);
            this.showRoutes(reportRouter);
            this.app.use(reportRouter);
        }
    }
    configCors() {
        const whitelist = process.env.WHITE_LIST ? String(process.env.WHITE_LIST).split(',') : [];
        const corsOptions = {
            credentials: true,
            origin: function (origin, callback) {
                if (whitelist.indexOf(origin) !== -1 || !origin) {
                    callback(null, true);
                }
                else {
                    callback(new Error('Not allowed by CORS'));
                }
            }
        };
        this.app.use(cors_1.default(corsOptions));
        this.app.options('*', cors_1.default());
    }
    initializeSession() {
        const repository = typeorm_2.getConnection().getRepository(this.config.session);
        this.app.use(express_session_1.default({
            secret: String(process.env.SECRET),
            resave: false,
            saveUninitialized: true,
            store: new typeorm_store_1.TypeormStore({ repository }),
            cookie: {
                maxAge: 1000 * 60 * 60 * 168
                // 24 = 1 day  <=> 168 = 7 days
                // Equals 1 day (1 day * 24 hr/1 day * 60 min/1 hr * 60 sec/1 min * 1000 ms / 1 sec)
            }
        }));
    }
    initializeRoutes() {
        this.controllers.forEach((controller) => {
            this.app.use(controller.router);
            this.showRoutes(controller.router);
        });
        this.app.all('*', function (req, res) {
            res.status(404).json({
                error: {
                    code: 404,
                    message: 'Route not found'
                }
            });
        });
    }
    // Show routes with config.showRoutes is true
    showRoutes(router) {
        const routes = router.stack.filter((r) => r.route)
            .map((r) => {
            return {
                method: Object.keys(r.route.methods)[0].toUpperCase(),
                path: r.route.path
            };
        });
        if (this.config.showRoutes) {
            routes.forEach((route) => console.log(`${'\x1b[31m'}${route.method.toUpperCase()}:\t${'\x1b[32m'}${route.path}${'\x1b[0m'}`));
            console.log('');
        }
    }
    async connectDatabase() {
        await typeorm_1.createConnections();
    }
    async run() {
        this.initializeSwagger();
        this.initializeMiddlewares();
        await this.connectDatabase();
        // configure auth options
        if (this.config.auth) {
            await this.initializeAuthentication(this.configAuth);
        }
        // load ioServer 
        this.loadIOserver();
        // load controllers and routes
        await this.loadControllers();
    }
    folderModulesCreate() {
        const dirModules = path_1.default.join(process.cwd(), 'dist/modules');
        const dirModulesSrc = path_1.default.join(process.cwd(), 'src/modules');
        if (!fs_1.default.existsSync(dirModules)) {
            fs_1.default.mkdirSync(dirModules, '0744');
        }
        if (!fs_1.default.existsSync(dirModulesSrc)) {
            fs_1.default.mkdirSync(dirModulesSrc, '0744');
        }
    }
}
exports.PxpApp = PxpApp;
