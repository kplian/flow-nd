/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Controller Class.
 *
 * @summary All common controllers functionality go here (all controllers should inherit this class).
 * @author Jaime Rivera
 *
 * Created at     : 2020-06-13 18:09:48
 * Last modified  : 2020-10-13 15:36:31
 * Last modified  : 2021-03-10 15:36:31 - Favio Figueroa
 * Last modified  : 2021-05-01 18:35:31 - Favio Figueroa
 */
import { EntityManager } from 'typeorm';
import { Request, Response, NextFunction } from 'express';
import { Schema } from 'joi';
import socketIO from 'socket.io';
import { ControllerInterface, ListParam } from './index';
import { IConfigPxpApp } from '../../interfaces';
export declare class Controller implements ControllerInterface {
    validated: boolean;
    params: Record<string, unknown>[];
    pxpParams: any;
    router: import("express-serve-static-core").Router;
    path: string;
    module: string;
    modelString: string;
    transactionCode: string;
    user: any;
    model: any;
    protected io: socketIO.Server;
    config: IConfigPxpApp;
    private basicRoutes;
    private basicReadOnly;
    constructor(module: string, Entity?: any, config?: IConfigPxpApp, io?: any);
    private initializeRoutes;
    genericMethodWrapper(params: Record<string, unknown>, req: Request, next: NextFunction, res: Response, methodName: string, dbsettings: string, readonly: boolean, permission: boolean, log: boolean, logConfig: {}, isHtml: boolean): Promise<void>;
    ormMethodWrapper(params: Record<string, unknown>, req: Request | any, next: NextFunction, res: Response, methodName: string, readonly: boolean, permission?: boolean, log?: boolean, logConfig?: {}, isHtml?: boolean): Promise<void>;
    list(params: Record<string, unknown>): Promise<unknown>;
    add(params: Record<string, unknown>, manager: EntityManager): Promise<unknown>;
    edit(params: Record<string, unknown>, manager: EntityManager): Promise<unknown>;
    delete(params: Record<string, unknown>, manager: EntityManager): Promise<unknown>;
    getWhereOwnColumns(params: Record<string, unknown>, model: any): Record<any, any>;
    getListParams(params: Record<string, unknown>, where: Record<string, unknown>): ListParam;
    procedureMethodWrapper(params: Record<string, unknown>, next: NextFunction, res: Response, methodName: string, readonly: boolean, permission?: boolean, log?: boolean, logConfig?: {}): Promise<void>;
    sqlMethodWrapper(params: Record<string, unknown>, next: NextFunction, res: Response, methodName: string, readonly: boolean, permission?: boolean, log?: boolean, logConfig?: {}): Promise<void>;
    classValidate(model: any): Promise<void>;
    schemaValidate(schema: Schema, params: Record<string, unknown>): Promise<unknown>;
    getListSchema(ownColumns: Record<string, unknown>): Schema;
}
