"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Run scripts for all modules
 *
 * @summary Manage modules scripts
 * @author Jaime Rivera
 *
 * Created at     : 2020-06-15 16:31:21
 * Last modified  : 2020-10-23 19:32:15
 */
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = __importDefault(require("util"));
const chalk_1 = __importDefault(require("chalk"));
const figlet = __importStar(require("figlet"));
require("reflect-metadata");
const typeorm_1 = require("typeorm");
const ScriptVersion_1 = __importDefault(require("./entities/ScriptVersion"));
async function loadCustomStripts() {
    const dir = path_1.default.join(process.cwd(), 'dist', 'config.js');
    const customScripts = await Promise.resolve().then(() => __importStar(require(dir)));
    return customScripts.default.scripts || [];
}
let scriptArray = [];
// let scriptArray: ScriptInterface[] = [...pxpScripts];
console.log(chalk_1.default.red(figlet.textSync('script-loader', { horizontalLayout: 'default' })));
console.log(chalk_1.default.red('=================================================================='));
console.log();
const compare = (a, b) => {
    let comparison = 0;
    const aSortCode = a.scriptCode.substring(8);
    const bSortCode = b.scriptCode.substring(8);
    if (aSortCode > bSortCode) {
        comparison = 1;
    }
    else if (aSortCode < bSortCode) {
        comparison = -1;
    }
    return comparison;
};
const executeScripts = async () => {
    const connection = typeorm_1.getConnection();
    while (scriptArray.length > 0) {
        const scriptObject = scriptArray.shift();
        if (scriptObject) {
            const foundSV = await ScriptVersion_1.default.findOne({ scriptCode: scriptObject.scriptCode });
            if (!foundSV) {
                let queryRunner = connection.createQueryRunner();
                try {
                    await queryRunner.connect();
                    await queryRunner.startTransaction();
                    const manager = queryRunner.manager;
                    await scriptObject.scriptFunction(manager);
                    const scriptVersion = new ScriptVersion_1.default();
                    scriptVersion.scriptCode = scriptObject.scriptCode;
                    await manager.save(scriptVersion);
                    await queryRunner.commitTransaction();
                    console.log(chalk_1.default.green('Loaded: ' + scriptObject.scriptCode));
                }
                catch (err) {
                    await queryRunner.rollbackTransaction();
                    console.log(chalk_1.default.red('Error: ' + scriptObject.scriptCode, err));
                }
                finally {
                    await queryRunner.release();
                }
            }
            else {
                console.log('Already exists: ' + scriptObject.scriptCode);
            }
        }
    }
};
(async () => {
    try {
        await typeorm_1.createConnections();
        const readdir = util_1.default.promisify(fs_1.default.readdir);
        const modulesPath = `${process.cwd()}/dist/modules`;
        let modules = [];
        try {
            const customScripts = await loadCustomStripts();
            scriptArray = [...scriptArray, ...customScripts];
            modules = await readdir(modulesPath);
            for (const module of modules) {
                const url = modulesPath + '/' + module + '/database/script.js';
                if (fs_1.default.existsSync(url)) {
                    const scriptAux = await Promise.resolve().then(() => __importStar(require(url)));
                    scriptArray = scriptArray.concat(scriptAux.default);
                }
            }
            scriptArray.sort(compare);
            await executeScripts();
            console.log(chalk_1.default.blue(figlet.textSync('thank you', { font: 'Mini', horizontalLayout: 'default' })));
            process.exit();
        }
        catch (err) {
            console.log('Error running script manager', err);
        }
    }
    catch (e) {
        // Deal with the fact the chain failed
    }
})();
