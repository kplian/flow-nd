"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.issueJWT = exports.configPassportJwtStrategy = void 0;
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Jwt config
 *
 * @summary Jwt config
 * @author Israel Colque
 *
 * Created at     : 2020-06-13 18:09:48
 * Last modified  : 2020-09-17 18:46:18
 */
const passport_jwt_1 = require("passport-jwt");
const passport_1 = __importDefault(require("passport"));
const typeorm_1 = require("typeorm");
const common_1 = require("@pxp-nd/common");
// import * as jwt from 'jsonwebtoken';
const jsonwebtoken_1 = require("jsonwebtoken");
const options = {
    jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken(),
    secretOrKey: String(process.env.SECRET),
    algorithms: ['HS256']
};
// app.js will pass the global passport object here, and this function will configure it
const configPassportJwtStrategy = (verifyUser = verifyUserJwt) => {
    // The JWT payload is passed into the verify callback
    passport_1.default.use(new passport_jwt_1.Strategy(options, function (jwt_payload, done) {
        // We will assign the `sub` property on the JWT to the database ID of user
        verifyUser(jwt_payload.sub, done);
    }));
};
exports.configPassportJwtStrategy = configPassportJwtStrategy;
function verifyUserJwt(id, done) {
    const UserRepo = typeorm_1.getRepository(common_1.User);
    UserRepo.findOne({
        where: {
            userId: id,
        },
    })
        .then((user) => {
        if (user) {
            done(null, user);
        }
        else {
            return done(null, null);
        }
    })
        .catch((err) => done(err, null));
}
/**
 * @param {*} user - The user object.  We need this to set the JWT `sub` payload property to the User ID
 */
function issueJWT(user, expiresIn = '1d') {
    const id = user.userId;
    const secret = String(process.env.SECRET);
    const payload = {
        sub: id,
        iat: Date.now()
    };
    const signedToken = jsonwebtoken_1.sign(payload, secret, {
        expiresIn,
        algorithm: 'HS256'
    });
    return {
        token: 'Bearer ' + signedToken,
        expires: expiresIn
    };
}
exports.issueJWT = issueJWT;
