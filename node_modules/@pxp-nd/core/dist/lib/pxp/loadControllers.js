"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Automatically load all controllers
 *
 * @summary Automatically load all controllers
 * @author Jaime Rivera
 *
 * Created at     : 2020-06-13 18:09:48
 * Last modified  : 2020-10-04 19:04:18
 */
const fs_1 = __importDefault(require("fs"));
const util_1 = __importDefault(require("util"));
const path_1 = __importDefault(require("path"));
// import * as controllers from '../../controllers';
const readdir = util_1.default.promisify(fs_1.default.readdir);
const loadPxpControllers = (config, io) => {
    const controllers = [];
    if (config.modules) {
        const modules = Object.keys(config.modules);
        modules.forEach((name) => {
            const module = config.modules[name];
            const modControllers = module.controllers ? module.controllers : [];
            modControllers.forEach((ctrl) => controllers.push(new ctrl(name, null, config, io)));
        });
    }
    // const pxpControllers: any = controllers;
    return controllers;
    // return  Object.keys(controllers).map((key: any) => new controllers[key]('pxp', config));
};
exports.default = async (config, io) => {
    // const modulesPath = `${__dirname}/../../modules`;
    const modulesPath = path_1.default.join(process.cwd(), `/dist/modules`);
    let modules = [];
    const controllers = loadPxpControllers(config, io);
    let controllerFiles = [];
    let auxFiles = [];
    try {
        modules = await readdir(modulesPath);
        for (const module of modules) {
            const files = await readdir(modulesPath + '/' + module + '/controllers');
            // this adds javascript files not ts
            auxFiles = files.reduce((result, j) => {
                if (!j.includes('.map') && j.includes('.js')) {
                    result.push({
                        url: modulesPath + '/' + module + '/controllers/' + j,
                        module
                    });
                }
                return result;
            }, []);
            controllerFiles = [...controllerFiles, ...auxFiles];
        }
        for (const controllerFile of controllerFiles) {
            const ControllerClass = await Promise.resolve().then(() => __importStar(require(controllerFile.url)));
            controllers.push(new ControllerClass.default(controllerFile.module, null, config, io));
        }
    }
    catch (err) {
        console.log(err);
    }
    return controllers;
};
