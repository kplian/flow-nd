"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeXlsx = void 0;
const xlsx_1 = __importDefault(require("xlsx"));
const typeorm_1 = require("typeorm");
const moment_1 = __importDefault(require("moment"));
const helper_1 = require("./helper");
const lodash_1 = __importDefault(require("lodash"));
const generateTable = (data, columns) => {
    const heads = lodash_1.default.map(columns, 'header');
    const keys = lodash_1.default.map(columns, 'dataKey');
    const table = [
        heads,
    ];
    data.forEach((item) => {
        const aux = [];
        keys.forEach(key => aux.push(item[key]));
        table.push(aux);
    });
    return table;
};
const makeXlsx = async (req, res) => {
    try {
        let data, params;
        if (!req.reportData) {
            // s-params
            params = await helper_1.parseParams(req);
            const Entity = await helper_1.getEntity(params.module, params.entity);
            data = await typeorm_1.getManager().find(Entity, {
            // select: keys,
            });
            // e-params
        }
        else {
            data = req.reportData.data;
            params = Object.assign({}, req.report);
        }
        const table = generateTable(data, params.columns);
        const wb = xlsx_1.default.utils.book_new();
        const ws = xlsx_1.default.utils.aoa_to_sheet(table);
        xlsx_1.default.utils.book_append_sheet(wb, ws, 'Data');
        /*** DETAIL REPORT START***/
        const detail = req.reportDetailData;
        if (detail) {
            const tableDetail = generateTable(detail.data, detail.columns);
            const wsd = xlsx_1.default.utils.aoa_to_sheet(tableDetail);
            xlsx_1.default.utils.book_append_sheet(wb, wsd, 'Detail');
        }
        // write options
        const wopts = { bookType: 'xlsx', bookSST: false, type: 'base64' };
        const buffer = xlsx_1.default.write(wb, wopts);
        res.setHeader('Content-Disposition', 'attachment; filename="' + params.filename + '_' + moment_1.default().format('DD-MM-YYYY_hh.mm.ss') + '.xlsx" ');
        res.setHeader('Access-Control-Allow-Origin', '*');
        res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
        res.end(new Buffer(buffer, 'base64'));
    }
    catch (err) {
        console.log(err);
        res.status(400).json({ message: 'An error occured in process' });
    }
};
exports.makeXlsx = makeXlsx;
