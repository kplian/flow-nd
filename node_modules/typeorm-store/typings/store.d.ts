import { Repository } from 'typeorm';
import { Store } from 'express-session';
export interface SessionEntity {
    /**
     * The randomly generated session ID.
     */
    id: string;
    /**
     * The UNIX timestamp at which the session will expire.
     */
    expiresAt: number;
    /**
     * The JSON data of the session.
     */
    data: string;
}
export interface Options {
    repository: Repository<SessionEntity>;
    /**
     * Session TTL in seconds. Defaults to 86400 (1 day).
     */
    ttl?: number;
    /**
     * Whether to remove expired sessions from the database. Defaults to true.
     */
    clearExpired?: boolean;
    /**
     * The interval between checking for expired sessions in seconds. Defaults to 86400 (1 day).
     */
    expirationInterval?: number;
}
export declare class TypeormStore extends Store {
    private readonly repository;
    private readonly ttl?;
    private readonly expirationInterval;
    private expirationIntervalId?;
    constructor(options: Options);
    /**
     * Get all sessions.
     * @param {(error: any, result?: any) => void} callback
     */
    all: (callback: (error: any, result?: any) => void) => void;
    /**
     * Destroy a session
     * @param {string} id
     * @param {(error: any) => void} callback
     */
    destroy: (id: string, callback?: ((error: any) => void) | undefined) => void;
    /**
     * Clear all sessions.
     * @param {(error: any) => void} callback
     */
    clear: (callback?: ((error: any) => void) | undefined) => void;
    /**
     * Get the session count.
     * @param {(error: any, length?: number) => void} callback
     */
    length: (callback: (error: any, length: number) => void) => void;
    /**
     * Get a session.
     * @param {string} id
     * @param {(error: any, session?: any) => any} callback
     */
    get: (id: string, callback: (error: any, session?: any) => void) => void;
    /**
     * Set a session.
     * @param {string} id
     * @param session
     * @param {(error: any) => void} callback
     */
    set: (id: string, session: any, callback?: ((error: any) => void) | undefined) => void;
    /**
     * Refresh the session expiry time.
     * @param {string} id
     * @param session
     * @param {(error: any) => void} callback
     */
    touch: (id: string, session: any, callback?: ((error: any) => void) | undefined) => void;
    /**
     * Remove all expired sessions from the database.
     * @param {(error: any) => void} callback
     */
    clearExpiredSessions: (callback?: ((error: any) => void) | undefined) => void;
    /**
     * Set the expiration interval in seconds. If the interval in seconds is not set, it defaults to the store's expiration interval.
     * @param {number} interval
     */
    setExpirationInterval: (interval?: number | undefined) => void;
    /**
     * Clear the expiration interval if it exists.
     */
    clearExpirationInterval: () => void;
    /**
     * Get the session TTL (time to live) in seconds.
     * @param session
     * @return {number}
     */
    private getTTL;
}
