"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const typeorm_1 = require("typeorm");
const core_1 = require("@pxp-nd/core");
const core_2 = require("@pxp-nd/core");
const entities_1 = require("../entities");
const entities_2 = require("../entities");
let CatalogValue = class CatalogValue extends core_1.Controller {
    async find(params) {
        const [data, count] = await typeorm_1.getManager().findAndCount(entities_1.CatalogValue, this.pxpParams);
        return { data, count };
    }
    //---------------------
    async findByCatalogId(params) {
        const [data, count] = await typeorm_1.getManager().findAndCount(entities_1.CatalogValue, { where: { catalogId: this.pxpParams.id } });
        return { data, count };
    }
    async findByCatalogCode(params) {
        const catalogParent = await typeorm_1.getManager().findOne(entities_2.Catalog, { where: { code: this.pxpParams.code } });
        if (catalogParent) {
            const [data, count] = await typeorm_1.getManager().findAndCount(entities_1.CatalogValue, { where: { catalogId: catalogParent.catalogId } });
            return { data, count };
        }
        else {
            return [];
        }
    }
    //---------------------
    async save(params) {
        const catalogValue = await typeorm_1.getManager().save(entities_1.CatalogValue, Object.assign({}, this.pxpParams));
        return catalogValue;
    }
    async edit(params) {
        console.log(params);
        const id = this.pxpParams.id;
        delete this.pxpParams.id;
        await typeorm_1.getManager().update(entities_1.CatalogValue, id, Object.assign({}, this.pxpParams));
        const catalogValue = await typeorm_1.getManager().findOne(entities_1.CatalogValue, {
            where: { catalogValueId: id }
        });
        return catalogValue;
    }
    async delete(params) {
        console.log('params', params);
        const catalogValue = await typeorm_1.getManager().delete(entities_1.CatalogValue, {
            catalogValueId: this.pxpParams.id
        });
        return catalogValue;
    }
};
__decorate([
    core_2.Get(),
    core_2.DbSettings('Orm'),
    core_2.ReadOnly(true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], CatalogValue.prototype, "find", null);
__decorate([
    core_2.Get('/find/:id'),
    core_2.DbSettings('Orm'),
    core_2.ReadOnly(true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], CatalogValue.prototype, "findByCatalogId", null);
__decorate([
    core_2.Get('/code/:code'),
    core_2.DbSettings('Orm'),
    core_2.ReadOnly(true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], CatalogValue.prototype, "findByCatalogCode", null);
__decorate([
    core_2.Post(),
    core_2.DbSettings('Orm'),
    core_2.ReadOnly(true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], CatalogValue.prototype, "save", null);
__decorate([
    core_2.Patch('/edit/:id'),
    core_2.DbSettings('Orm'),
    core_2.ReadOnly(true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], CatalogValue.prototype, "edit", null);
__decorate([
    core_2.Delete('/delete/:id'),
    core_2.DbSettings('Orm'),
    core_2.ReadOnly(true),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], CatalogValue.prototype, "delete", null);
CatalogValue = __decorate([
    core_2.Route('/catalog-values')
], CatalogValue);
exports.default = CatalogValue;
