"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createConnections = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const config = {
    name: 'default',
    synchronize: false,
    logging: false,
    entities: [
        'dist/modules/**/entity/*.js',
        'dist/modules/**/entities/*.js',
        'node_modules/@pxp-nd/core/**/entities/*.js'
        // 'node_modules/@pxp-nd/entities/**/entity/*.js'
    ],
    migrations: ['src/migration/**/*.ts'],
    subscribers: [
        'dist/modules/**/subscribers/*.js',
        // 'node_modules/@pxp-nd/core/**/subscribers/*.js'
    ],
    cli: {
        entitiesDir: 'src/modules',
        migrationsDir: 'src/migration',
        subscribersDir: 'src/subscriber'
    }
};
const setConfig = (connection) => {
    const subscribers = connection.subscribers || [];
    if (connection.hasOwnProperty('entities')) {
        return Object.assign(Object.assign(Object.assign({}, config), connection), { entities: [...connection.entities, ...config.entities], subscribers: [...subscribers, ...config.subscribers] });
    }
    return Object.assign(Object.assign({}, config), connection);
};
const createConnections = (connections) => {
    if (Array.isArray(connections)) {
        return connections.map(cnn => setConfig(cnn));
    }
    else {
        return setConfig(connections);
    }
};
exports.createConnections = createConnections;
const createCommonControllers = (entities) => {
    const pathModules = path_1.default.join(process.cwd(), 'dist', 'modules', 'common');
    const pathEntities = path_1.default.join(pathModules, 'entity');
    const pathControllers = path_1.default.join(pathModules, 'controllers');
    const pathCommonEntities = path_1.default.join(process.cwd(), 'node_modules', '@pxp-nd', 'common', 'dist', 'entities');
    const pathCommonControllers = path_1.default.join(process.cwd(), 'node_modules', '@pxp-nd', 'common', 'dist', 'controllers');
    if (!fs_1.default.existsSync(pathEntities)) {
        fs_1.default.mkdirSync(pathEntities, { recursive: true });
    }
    if (!fs_1.default.existsSync(pathControllers)) {
        fs_1.default.mkdirSync(pathControllers, { recursive: true });
    }
    fs_1.default.readdir(pathCommonEntities, (err, files) => {
        if (!err) {
            files.forEach(file => {
                if (!file.includes('index') && file.includes('.js')) {
                    fs_1.default.copyFile(path_1.default.join(pathCommonEntities, file), path_1.default.join(pathEntities, file), (err) => {
                        if (err)
                            console.log(err);
                    });
                }
            });
        }
    });
    fs_1.default.readdir(pathCommonControllers, (err, files) => {
        if (!err) {
            files.forEach(file => {
                if (!file.includes('index') && file.includes('.js')) {
                    fs_1.default.copyFile(path_1.default.join(pathCommonControllers, file), path_1.default.join(pathControllers, file), (err) => {
                        if (err)
                            console.log(err);
                    });
                }
            });
        }
    });
};
