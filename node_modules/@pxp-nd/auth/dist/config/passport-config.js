"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isAuthenticated = exports.configPassport = exports.getRoutesAuth = void 0;
/**
 * Kplian Ltda 2020
 *
 * MIT
 *
 * Import all auth configs
 *
 * @summary Import all auth configs
 * @author Israel Colque
 *
 * Created at     : 2020-06-13 18:09:48
 * Last modified  : 2020-09-17 18:43:59
 */
const passport_local_1 = require("./passport-local");
const passport_facebook_1 = require("./passport-facebook");
const passport_google_1 = require("./passport-google");
const passport_jwt_1 = require("./passport-jwt");
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const isDirectory = (source) => fs_1.lstatSync(source).isDirectory();
const modulesFolder = process.cwd() + '/dist/modules';
const getRoutesAuth = () => {
    return fs_1.readdirSync(modulesFolder)
        .filter(name => name !== 'pxp')
        .map(name => path_1.default.join(modulesFolder, name))
        .filter(isDirectory)
        .filter(module => {
        const authDir = path_1.default.join(module, 'auth');
        const authFile = path_1.default.join(authDir, 'auth.js');
        return fs_1.existsSync(authDir) ? isDirectory(authDir) && fs_1.existsSync(authFile) : false;
    });
};
exports.getRoutesAuth = getRoutesAuth;
const getCustomStrategies = () => {
    exports.getRoutesAuth()
        .forEach(module => {
        const authFile = path_1.default.join(module, 'auth', 'auth.js');
        Promise.resolve().then(() => __importStar(require(authFile))).then(authCustom => {
            authCustom.strategies.forEach((stg) => stg());
        });
    });
};
const configPassport = (auth) => {
    if (auth === true) {
        getCustomStrategies();
        passport_google_1.configGoogleStrategy();
        passport_facebook_1.configFacebookStrategy();
        passport_jwt_1.configPassportJwtStrategy();
        passport_local_1.configPassportLocal();
    }
    if (auth && auth.local === true) {
        passport_local_1.configPassportLocal();
    }
    if (auth && auth.local && auth.local.verifyUser) {
        passport_local_1.configPassportLocal(auth.local.fields, auth.local.verifyUser, auth.serialize, auth.deserialize);
    }
    if (auth && auth.jwt === true) {
        passport_jwt_1.configPassportJwtStrategy();
    }
    if (auth && auth.jwt && auth.jwt.verifyUser) {
        passport_jwt_1.configPassportJwtStrategy(auth.jwt.verifyUser);
    }
};
exports.configPassport = configPassport;
/**
 * Login Required middleware.
 */
const isAuthenticated = (req, res, next) => {
    if (req.isAuthenticated()) {
        return next();
    }
    res.status(401).send({
        error: true,
        message: 'Not Authorized'
    });
};
exports.isAuthenticated = isAuthenticated;
