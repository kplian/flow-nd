{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.ts","webpack:///./src/store.ts","webpack:///external \"typeorm\"","webpack:///external \"express-session\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__export","typeorm_1","express_session_1","TypeormStore","Store","[object Object]","options","super","this","all","callback","repository","find","then","sessions","map","session","JSON","parse","data","catch","error","destroy","id","delete","clear","length","count","findOne","set","stringify","ttl","getTTL","expiresAt","Math","floor","Date","getTime","save","touch","update","clearExpiredSessions","timestamp","round","LessThan","setExpirationInterval","interval","expirationInterval","clearExpirationInterval","expirationIntervalId","setInterval","clearInterval","undefined","cookie","maxAge","Error","clearExpired","require"],"mappings":"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","file":"typeormStore.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export * from './store';\n","import { LessThan, Repository } from 'typeorm';\nimport { Store } from 'express-session';\n\nexport interface SessionEntity {\n  /**\n   * The randomly generated session ID.\n   */\n  id: string;\n\n  /**\n   * The UNIX timestamp at which the session will expire.\n   */\n  expiresAt: number;\n\n  /**\n   * The JSON data of the session.\n   */\n  data: string;\n}\n\nexport interface Options {\n  repository: Repository<SessionEntity>;\n\n  /**\n   * Session TTL in seconds. Defaults to 86400 (1 day).\n   */\n  ttl?: number;\n\n  /**\n   * Whether to remove expired sessions from the database. Defaults to true.\n   */\n  clearExpired?: boolean;\n\n  /**\n   * The interval between checking for expired sessions in seconds. Defaults to 86400 (1 day).\n   */\n  expirationInterval?: number;\n}\n\nexport class TypeormStore extends Store {\n  private readonly repository: Repository<SessionEntity>;\n  private readonly ttl?: number;\n  private readonly expirationInterval: number;\n  private expirationIntervalId?: number;\n\n  constructor(options: Options) {\n    super(options);\n\n    if (!options.repository) {\n      throw new Error('The repository option is required');\n    }\n\n    this.repository = options.repository;\n    this.ttl = options.ttl;\n    this.expirationInterval = options.expirationInterval || 86400;\n\n    if (options.clearExpired === undefined || options.clearExpired) {\n      this.setExpirationInterval(this.expirationInterval);\n    }\n  }\n\n  /**\n   * Get all sessions.\n   * @param {(error: any, result?: any) => void} callback\n   */\n  all = (callback: (error: any, result?: any) => void): void => {\n    this.repository\n      .find()\n      .then((sessions: SessionEntity[]) => sessions.map(session => JSON.parse(session.data)))\n      .then((data: any) => callback(null, data))\n      .catch((error: any) => callback(error));\n  };\n\n  /**\n   * Destroy a session\n   * @param {string} id\n   * @param {(error: any) => void} callback\n   */\n  destroy = (id: string, callback?: ((error: any) => void)): void => {\n    this.repository\n      .delete(id)\n      .then(() => callback && callback(null))\n      .catch((error: any) => callback && callback(error));\n  };\n\n  /**\n   * Clear all sessions.\n   * @param {(error: any) => void} callback\n   */\n  clear = (callback?: ((error: any) => void)): void => {\n    this.repository\n      .clear()\n      .then(() => callback && callback(null))\n      .catch((error: any) => callback && callback(error));\n  };\n\n  /**\n   * Get the session count.\n   * @param {(error: any, length?: number) => void} callback\n   */\n  length = (callback: (error: any, length: number) => void): void => {\n    this.repository\n      .count()\n      .then((length: number) => callback(null, length))\n      .catch((error: any) => callback(error, 0));\n  };\n\n  /**\n   * Get a session.\n   * @param {string} id\n   * @param {(error: any, session?: any) => any} callback\n   */\n  get = (id: string, callback: (error: any, session?: any) => void): void => {\n    this.repository\n      .findOne(id)\n      .then((session: SessionEntity | undefined) => {\n        if (!session) {\n          return callback(null);\n        }\n        const data = JSON.parse(session.data);\n        callback(null, data);\n      })\n      .catch((error: any) => callback(error));\n  };\n\n  /**\n   * Set a session.\n   * @param {string} id\n   * @param session\n   * @param {(error: any) => void} callback\n   */\n  set = (id: string, session: any, callback?: ((error: any) => void)): void => {\n    let data;\n    try {\n      data = JSON.stringify(session);\n    } catch (error) {\n      if (callback) {\n        return callback(error);\n      }\n      throw error;\n    }\n\n    const ttl = this.getTTL(session);\n    const expiresAt = Math.floor(new Date().getTime() / 1000) + ttl;\n\n    this.repository\n      .save({ id, data, expiresAt })\n      .then(() => callback && callback(null))\n      .catch((error: any) => callback && callback(error));\n  };\n\n  /**\n   * Refresh the session expiry time.\n   * @param {string} id\n   * @param session\n   * @param {(error: any) => void} callback\n   */\n  touch = (id: string, session: any, callback?: ((error: any) => void)): void => {\n    const ttl = this.getTTL(session);\n    const expiresAt = Math.floor(new Date().getTime() / 1000) + ttl;\n\n    this.repository\n      .update(id, { expiresAt })\n      .then(() => callback && callback(null))\n      .catch((error: any) => callback && callback(error));\n  };\n\n  /**\n   * Remove all expired sessions from the database.\n   * @param {(error: any) => void} callback\n   */\n  clearExpiredSessions = (callback?: (error: any) => void) => {\n    const timestamp = Math.round(new Date().getTime() / 1000);\n\n    this.repository\n      .delete({ expiresAt: LessThan(timestamp) })\n      .then(() => callback && callback(null))\n      .catch((error: any) => callback && callback(error));\n  };\n\n  /**\n   * Set the expiration interval in seconds. If the interval in seconds is not set, it defaults to the store's expiration interval.\n   * @param {number} interval\n   */\n  setExpirationInterval = (interval?: number) => {\n    interval = interval || this.expirationInterval;\n\n    this.clearExpirationInterval();\n    this.expirationIntervalId = setInterval(this.clearExpiredSessions, interval * 1000);\n  };\n\n  /**\n   * Clear the expiration interval if it exists.\n   */\n  clearExpirationInterval = () => {\n    if (this.expirationIntervalId) {\n      clearInterval(this.expirationIntervalId);\n    }\n\n    this.expirationIntervalId = undefined;\n  };\n\n  /**\n   * Get the session TTL (time to live) in seconds.\n   * @param session\n   * @return {number}\n   */\n  private getTTL = (session: any): number => {\n    if (this.ttl) {\n      return this.ttl;\n    }\n    return session.cookie && session.cookie.maxAge\n      ? Math.floor(session.cookie.maxAge / 1000)\n      : 86400;\n  };\n}\n","module.exports = require(\"typeorm\");","module.exports = require(\"express-session\");"],"sourceRoot":""}