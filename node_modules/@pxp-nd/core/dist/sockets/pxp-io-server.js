"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const socket_io_1 = require("socket.io");
const mainSockets = __importStar(require("./basic-sockets"));
class PxpIOServer {
    constructor(server, sockets) {
        this.io = new socket_io_1.Server(server, { cors: {
                origin: '*',
            } });
        this.listenSockets(sockets);
    }
    listenSockets(sockets = {}) {
        console.log('listen connections');
        this.io.on('connection', client => {
            // console.log('Cliente connected:', client.id);
            //connect client
            mainSockets.connectClient(client, this.io);
            // user configuration
            // sockets.userConfig( client, this.io );
            // message
            // sockets.message( client, this.io );
            // disconnect client
            mainSockets.disconnect(client, this.io);
            Object.keys(sockets).forEach(key => {
                // console.log('on socket:', key);
                sockets[key](client, this.io);
            });
        });
    }
}
exports.default = PxpIOServer;
